{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rysch\\\\OneDrive\\\\Desktop\\\\4HC3\\\\as4\\\\startercode\\\\frontend\\\\src\\\\App.js\";\nimport React from 'react';\nimport { render } from 'react-dom';\nimport { Router, Route, Link } from 'react-router';\nimport './App.css'; // Install the socket io client using:\n//    npm install socket.io\n//\n// Then import socket io and create a socket:\n//\n\nimport io from 'socket.io-client';\nconst socket = io('http://localhost:3001'); //\n// See: https://socket.io/get-started/chat\n//      https://www.npmjs.com/package/socket.io-client\n\nvar NavBar = React.createClass({\n  displayName: \"NavBar\",\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      onClick: () => history.push('page1'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 11\n      }\n    }, \"Page 1\"), /*#__PURE__*/React.createElement(\"a\", {\n      onClick: () => history.push('page2'),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 11\n      }\n    }, \"Page 2\")));\n  }\n\n});\nvar Application = React.createClass({\n  displayName: \"Application\",\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(NavBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }\n    }, \"Other Content\"), this.props.children);\n  }\n\n});\n\nclass Page1 extends React.Component {\n  constructor(props) {\n    super(props); // An array of social media posts messages, and we'll increment nextID\n    // to maintain a unique ID for each post in our array\n\n    this.state = {\n      posts: [],\n      nextID: 0\n    }; // We can setup the event handlers for the messages in the constructor...\n\n    socket.on('connect', function () {\n      console.log(\"Connect....\"); // When we receive a social media message, call setState and insert \n      // it into the array of posts\n\n      socket.on('post', function (data) {\n        // Can uncomment this to see the raw data coming in...\n        // console.log(\"post: \" + JSON.stringify(data));\n        // increment the next unique ID, and put post data into the list of \n        // posts... use the '...' syntax to make this insertion easier:\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax \n        this.setState({\n          posts: [...this.state.posts, {\n            name: data.name,\n            image: data.image,\n            content: data.content,\n            problem: data.problem,\n            priority: data.priority,\n            id: this.state.nextID\n          }],\n          nextID: this.state.nextID + 1\n        });\n      }.bind(this)); // ^^ Like other event handlers, we bind the callback function to the \n      // component so we can use setState        \n    }.bind(this)); // ^^ ... And same with the callback function for when a connection is made\n  } // Output all the posts into a table\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/\",\n      component: Application,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"page1\",\n      component: Page1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"page2\",\n      component: Page2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Route, {\n      path: \"/login\",\n      component: Login,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 11\n      }\n    })), this.state.posts.map(({\n      name,\n      image,\n      content,\n      problem,\n      priority,\n      id\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      key: id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: image,\n      alt: \"{name}\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 15\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 48\n      }\n    }), name, \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 24\n      }\n    }), problem, \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 27\n      }\n    }), priority, \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 28\n      }\n    }), content, \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 27\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 34\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 41\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 48\n      }\n    }))));\n  }\n\n}\n\nclass Page2 extends React.Component {\n  constructor(props) {\n    super(props); // An array of social media posts messages, and we'll increment nextID\n    // to maintain a unique ID for each post in our array\n\n    this.state = {\n      posts: [],\n      nextID: 0\n    }; // We can setup the event handlers for the messages in the constructor...\n\n    socket.on('connect', function () {\n      console.log(\"Connect....\"); // When we receive a social media message, call setState and insert \n      // it into the array of posts\n\n      socket.on('post', function (data) {\n        // Can uncomment this to see the raw data coming in...\n        // console.log(\"post: \" + JSON.stringify(data));\n        // increment the next unique ID, and put post data into the list of \n        // posts... use the '...' syntax to make this insertion easier:\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax \n        this.setState({\n          posts: [...this.state.posts, {\n            name: data.name,\n            image: data.image,\n            content: data.content,\n            problem: data.problem,\n            priority: data.priority,\n            id: this.state.nextID\n          }],\n          nextID: this.state.nextID + 1\n        });\n      }.bind(this)); // ^^ Like other event handlers, we bind the callback function to the \n      // component so we can use setState        \n    }.bind(this)); // ^^ ... And same with the callback function for when a connection is made\n  } // Output all the posts into a table\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/\",\n      component: Application,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"page1\",\n      component: Page1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"page2\",\n      component: Page2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Route, {\n      path: \"/login\",\n      component: Login,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 11\n      }\n    })), this.state.posts.map(({\n      name,\n      image,\n      content,\n      problem,\n      priority,\n      id\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      key: id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: image,\n      alt: \"{name}\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 15\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 48\n      }\n    }), name, \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 24\n      }\n    }), problem, \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 27\n      }\n    }), priority, \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 28\n      }\n    }), content, \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 27\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 34\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 41\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 48\n      }\n    }))));\n  }\n\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props); // An array of social media posts messages, and we'll increment nextID\n    // to maintain a unique ID for each post in our array\n\n    this.state = {\n      posts: [],\n      nextID: 0\n    }; // We can setup the event handlers for the messages in the constructor...\n\n    socket.on('connect', function () {\n      console.log(\"Connect....\"); // When we receive a social media message, call setState and insert \n      // it into the array of posts\n\n      socket.on('post', function (data) {\n        // Can uncomment this to see the raw data coming in...\n        // console.log(\"post: \" + JSON.stringify(data));\n        // increment the next unique ID, and put post data into the list of \n        // posts... use the '...' syntax to make this insertion easier:\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax \n        this.setState({\n          posts: [...this.state.posts, {\n            name: data.name,\n            image: data.image,\n            content: data.content,\n            problem: data.problem,\n            priority: data.priority,\n            id: this.state.nextID\n          }],\n          nextID: this.state.nextID + 1\n        });\n      }.bind(this)); // ^^ Like other event handlers, we bind the callback function to the \n      // component so we can use setState        \n    }.bind(this)); // ^^ ... And same with the callback function for when a connection is made\n  } // Output all the posts into a table\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Router, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"/\",\n      component: Application,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Route, {\n      path: \"page1\",\n      component: Page1,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(Route, {\n      path: \"page2\",\n      component: Page2,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 11\n      }\n    })), /*#__PURE__*/React.createElement(Route, {\n      path: \"/login\",\n      component: Login,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235,\n        columnNumber: 11\n      }\n    })), this.state.posts.map(({\n      name,\n      image,\n      content,\n      problem,\n      priority,\n      id\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      key: id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: image,\n      alt: \"{name}\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 15\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 48\n      }\n    }), name, \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 24\n      }\n    }), problem, \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 27\n      }\n    }), priority, \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 28\n      }\n    }), content, \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 27\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 34\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 41\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244,\n        columnNumber: 48\n      }\n    }))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["C:/Users/rysch/OneDrive/Desktop/4HC3/as4/startercode/frontend/src/App.js"],"names":["React","render","Router","Route","Link","io","socket","NavBar","createClass","history","push","Application","props","children","Page1","Component","constructor","state","posts","nextID","on","console","log","data","setState","name","image","content","problem","priority","id","bind","Page2","Login","map","App"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { render } from 'react-dom';\nimport { Router, Route, Link } from 'react-router';\nimport './App.css';\n\n// Install the socket io client using:\n//    npm install socket.io\n//\n// Then import socket io and create a socket:\n//\nimport io from 'socket.io-client';\nconst socket = io('http://localhost:3001');\n//\n// See: https://socket.io/get-started/chat\n//      https://www.npmjs.com/package/socket.io-client\n\nvar NavBar = React.createClass({\n  render() {\n    return (\n      <div>\n        <ul>\n          <a onClick={() => history.push('page1') }>Page 1</a>\n          <a onClick={() => history.push('page2') }>Page 2</a>\n        </ul>\n      </div>\n    )\n  }\n});\n\nvar Application = React.createClass({\n  render() {\n    return (\n      <div>\n        <NavBar />\n        <div>Other Content</div>\n        {this.props.children}\n      </div>\n    )\n  }\n});\n\nclass Page1 extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    // An array of social media posts messages, and we'll increment nextID\n    // to maintain a unique ID for each post in our array\n    this.state = {posts: [],nextID: 0};\n\n    // We can setup the event handlers for the messages in the constructor...\n    socket.on('connect', function(){\n\n      console.log(\"Connect....\");\n\n      // When we receive a social media message, call setState and insert \n      // it into the array of posts\n      socket.on('post', \n\n        function(data) {\n\n          // Can uncomment this to see the raw data coming in...\n          // console.log(\"post: \" + JSON.stringify(data));\n\n          // increment the next unique ID, and put post data into the list of \n          // posts... use the '...' syntax to make this insertion easier:\n          // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax \n          this.setState( \n            {posts: [...this.state.posts,\n                     {name: data.name, \n                      image: data.image, \n                      content: data.content, \n                      problem: data.problem,\n                      priority: data.priority,\n                      id: this.state.nextID}]\n            ,nextID: this.state.nextID + 1} );\n        }.bind(this));\n        // ^^ Like other event handlers, we bind the callback function to the \n        // component so we can use setState        \n\n    }.bind(this));\n    // ^^ ... And same with the callback function for when a connection is made\n\n  }\n  \n  // Output all the posts into a table\n  render() {\n    return (\n      <div>\n        <Router>\n          <Route path=\"/\" component={Application}>\n          <Route path=\"page1\" component={Page1} />\n          <Route path=\"page2\" component={Page2} />\n          </Route>\n          <Route path=\"/login\" component={Login} />\n        </Router>\n        {this.state.posts.map( \n          ({name,image,content,problem,priority,id}) => \n            <div key={id}> \n              <img src={image} alt=\"{name}\" /> <br />\n                {name} <br />\n                {problem} <br />\n                {priority} <br />\n                {content} <br /> <br /> <br /> <br />\n            </div> \n          )}\n      </div>\n    );\n  }\n}\n\nclass Page2 extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    // An array of social media posts messages, and we'll increment nextID\n    // to maintain a unique ID for each post in our array\n    this.state = {posts: [],nextID: 0};\n\n    // We can setup the event handlers for the messages in the constructor...\n    socket.on('connect', function(){\n\n      console.log(\"Connect....\");\n\n      // When we receive a social media message, call setState and insert \n      // it into the array of posts\n      socket.on('post', \n\n        function(data) {\n\n          // Can uncomment this to see the raw data coming in...\n          // console.log(\"post: \" + JSON.stringify(data));\n\n          // increment the next unique ID, and put post data into the list of \n          // posts... use the '...' syntax to make this insertion easier:\n          // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax \n          this.setState( \n            {posts: [...this.state.posts,\n                     {name: data.name, \n                      image: data.image, \n                      content: data.content, \n                      problem: data.problem,\n                      priority: data.priority,\n                      id: this.state.nextID}]\n            ,nextID: this.state.nextID + 1} );\n        }.bind(this));\n        // ^^ Like other event handlers, we bind the callback function to the \n        // component so we can use setState        \n\n    }.bind(this));\n    // ^^ ... And same with the callback function for when a connection is made\n\n  }\n  \n  // Output all the posts into a table\n  render() {\n    return (\n      <div>\n        <Router>\n          <Route path=\"/\" component={Application}>\n          <Route path=\"page1\" component={Page1} />\n          <Route path=\"page2\" component={Page2} />\n          </Route>\n          <Route path=\"/login\" component={Login} />\n        </Router>\n        {this.state.posts.map( \n          ({name,image,content,problem,priority,id}) => \n            <div key={id}> \n              <img src={image} alt=\"{name}\" /> <br />\n                {name} <br />\n                {problem} <br />\n                {priority} <br />\n                {content} <br /> <br /> <br /> <br />\n            </div> \n          )}\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n\n    // An array of social media posts messages, and we'll increment nextID\n    // to maintain a unique ID for each post in our array\n    this.state = {posts: [],nextID: 0};\n\n    // We can setup the event handlers for the messages in the constructor...\n    socket.on('connect', function(){\n\n      console.log(\"Connect....\");\n\n      // When we receive a social media message, call setState and insert \n      // it into the array of posts\n      socket.on('post', \n\n        function(data) {\n\n          // Can uncomment this to see the raw data coming in...\n          // console.log(\"post: \" + JSON.stringify(data));\n\n          // increment the next unique ID, and put post data into the list of \n          // posts... use the '...' syntax to make this insertion easier:\n          // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax \n          this.setState( \n            {posts: [...this.state.posts,\n                     {name: data.name, \n                      image: data.image, \n                      content: data.content, \n                      problem: data.problem,\n                      priority: data.priority,\n                      id: this.state.nextID}]\n            ,nextID: this.state.nextID + 1} );\n        }.bind(this));\n        // ^^ Like other event handlers, we bind the callback function to the \n        // component so we can use setState        \n\n    }.bind(this));\n    // ^^ ... And same with the callback function for when a connection is made\n\n  }\n  \n  // Output all the posts into a table\n  render() {\n    return (\n      <div>\n        <Router>\n          <Route path=\"/\" component={Application}>\n          <Route path=\"page1\" component={Page1} />\n          <Route path=\"page2\" component={Page2} />\n          </Route>\n          <Route path=\"/login\" component={Login} />\n        </Router>\n        {this.state.posts.map( \n          ({name,image,content,problem,priority,id}) => \n            <div key={id}> \n              <img src={image} alt=\"{name}\" /> <br />\n                {name} <br />\n                {problem} <br />\n                {priority} <br />\n                {content} <br /> <br /> <br /> <br />\n            </div> \n          )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}