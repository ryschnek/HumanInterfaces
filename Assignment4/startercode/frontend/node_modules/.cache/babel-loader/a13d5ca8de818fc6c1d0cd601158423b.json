{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rysch\\\\OneDrive\\\\Desktop\\\\4HC3\\\\as4\\\\startercode\\\\frontend\\\\src\\\\LiveFeed.js\";\n// Home.js\nimport React, { Component } from 'react';\nimport io from 'socket.io-client';\nconst socket = io('http://localhost:3001');\nexport default class LiveFeed extends Component {\n  constructor(props) {\n    super(props); // An array of social media posts messages, and we'll increment nextID\n    // to maintain a unique ID for each post in our array\n\n    this.state = {\n      posts: [],\n      nextID: 0\n    }; // We can setup the event handlers for the messages in the constructor...\n\n    socket.on('connect', function () {\n      console.log(\"Connect....\"); // When we receive a social media message, call setState and insert \n      // it into the array of posts\n\n      socket.on('post', function (data) {\n        // Can uncomment this to see the raw data coming in...\n        // console.log(\"post: \" + JSON.stringify(data));\n        // increment the next unique ID, and put post data into the list of \n        // posts... use the '...' syntax to make this insertion easier:\n        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax \n        this.setState({\n          posts: [...this.state.posts, {\n            name: data.name,\n            image: data.image,\n            content: data.content,\n            problem: data.problem,\n            priority: data.priority,\n            id: this.state.nextID\n          }],\n          nextID: this.state.nextID + 1\n        });\n      }.bind(this)); // ^^ Like other event handlers, we bind the callback function to the \n      // component so we can use setState        \n    }.bind(this)); // ^^ ... And same with the callback function for when a connection is made\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }, \"LiveFeed\"), this.state.posts.map(({\n      name,\n      image,\n      content,\n      problem,\n      priority,\n      id\n    }) => /*#__PURE__*/React.createElement(\"div\", {\n      key: id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: image,\n      alt: \"{name}\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 15\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 48\n      }\n    }), name, \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 24\n      }\n    }), problem, \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 27\n      }\n    }), priority, \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 28\n      }\n    }), content, \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 27\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 34\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 41\n      }\n    }), \" \", /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 48\n      }\n    }))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/rysch/OneDrive/Desktop/4HC3/as4/startercode/frontend/src/LiveFeed.js"],"names":["React","Component","io","socket","LiveFeed","constructor","props","state","posts","nextID","on","console","log","data","setState","name","image","content","problem","priority","id","bind","render","map"],"mappings":";AAAA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AAEA,OAAOC,EAAP,MAAe,kBAAf;AACA,MAAMC,MAAM,GAAGD,EAAE,CAAC,uBAAD,CAAjB;AAEA,eAAe,MAAME,QAAN,SAAuBH,SAAvB,CAAiC;AAE5CI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN,EADe,CAGf;AACA;;AACA,SAAKC,KAAL,GAAa;AAACC,MAAAA,KAAK,EAAE,EAAR;AAAWC,MAAAA,MAAM,EAAE;AAAnB,KAAb,CALe,CAOf;;AACAN,IAAAA,MAAM,CAACO,EAAP,CAAU,SAAV,EAAqB,YAAU;AAE7BC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAF6B,CAI7B;AACA;;AACAT,MAAAA,MAAM,CAACO,EAAP,CAAU,MAAV,EAEE,UAASG,IAAT,EAAe;AAEb;AACA;AAEA;AACA;AACA;AACA,aAAKC,QAAL,CACE;AAACN,UAAAA,KAAK,EAAE,CAAC,GAAG,KAAKD,KAAL,CAAWC,KAAf,EACC;AAACO,YAAAA,IAAI,EAAEF,IAAI,CAACE,IAAZ;AACCC,YAAAA,KAAK,EAAEH,IAAI,CAACG,KADb;AAECC,YAAAA,OAAO,EAAEJ,IAAI,CAACI,OAFf;AAGCC,YAAAA,OAAO,EAAEL,IAAI,CAACK,OAHf;AAICC,YAAAA,QAAQ,EAAEN,IAAI,CAACM,QAJhB;AAKCC,YAAAA,EAAE,EAAE,KAAKb,KAAL,CAAWE;AALhB,WADD,CAAR;AAOCA,UAAAA,MAAM,EAAE,KAAKF,KAAL,CAAWE,MAAX,GAAoB;AAP7B,SADF;AASD,OAjBD,CAiBEY,IAjBF,CAiBO,IAjBP,CAFF,EAN6B,CA0B3B;AACA;AAEH,KA7BoB,CA6BnBA,IA7BmB,CA6Bd,IA7Bc,CAArB,EARe,CAsCf;AAED;;AAELC,EAAAA,MAAM,GAAG;AACP,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAGG,KAAKf,KAAL,CAAWC,KAAX,CAAiBe,GAAjB,CACD,CAAC;AAACR,MAAAA,IAAD;AAAMC,MAAAA,KAAN;AAAYC,MAAAA,OAAZ;AAAoBC,MAAAA,OAApB;AAA4BC,MAAAA,QAA5B;AAAqCC,MAAAA;AAArC,KAAD,kBACE;AAAK,MAAA,GAAG,EAAEA,EAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,GAAG,EAAEJ,KAAV;AAAiB,MAAA,GAAG,EAAC,QAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,oBACmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADnC,EAEKD,IAFL,oBAEW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFX,EAGKG,OAHL,oBAGc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHd,EAIKC,QAJL,oBAIe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJf,EAKKF,OALL,oBAKc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALd,oBAKqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALrB,oBAK4B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAL5B,oBAKmC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALnC,CAFD,CAHH,CADJ;AAgBD;;AA7D6C","sourcesContent":["// Home.js\r\n\r\nimport React, { Component } from 'react';\r\n\r\nimport io from 'socket.io-client';\r\nconst socket = io('http://localhost:3001');\r\n\r\nexport default class LiveFeed extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        // An array of social media posts messages, and we'll increment nextID\r\n        // to maintain a unique ID for each post in our array\r\n        this.state = {posts: [],nextID: 0};\r\n    \r\n        // We can setup the event handlers for the messages in the constructor...\r\n        socket.on('connect', function(){\r\n    \r\n          console.log(\"Connect....\");\r\n    \r\n          // When we receive a social media message, call setState and insert \r\n          // it into the array of posts\r\n          socket.on('post', \r\n    \r\n            function(data) {\r\n    \r\n              // Can uncomment this to see the raw data coming in...\r\n              // console.log(\"post: \" + JSON.stringify(data));\r\n    \r\n              // increment the next unique ID, and put post data into the list of \r\n              // posts... use the '...' syntax to make this insertion easier:\r\n              // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax \r\n              this.setState( \r\n                {posts: [...this.state.posts,\r\n                         {name: data.name, \r\n                          image: data.image, \r\n                          content: data.content, \r\n                          problem: data.problem,\r\n                          priority: data.priority,\r\n                          id: this.state.nextID}]\r\n                ,nextID: this.state.nextID + 1} );\r\n            }.bind(this));\r\n            // ^^ Like other event handlers, we bind the callback function to the \r\n            // component so we can use setState        \r\n    \r\n        }.bind(this));\r\n        // ^^ ... And same with the callback function for when a connection is made\r\n    \r\n      }\r\n\r\n  render() {\r\n    return (\r\n        <div>\r\n          <h2>LiveFeed</h2>\r\n\r\n          {this.state.posts.map( \r\n          ({name,image,content,problem,priority,id}) => \r\n            <div key={id}> \r\n              <img src={image} alt=\"{name}\" /> <br />\r\n                {name} <br />\r\n                {problem} <br />\r\n                {priority} <br />\r\n                {content} <br /> <br /> <br /> <br />\r\n            </div> \r\n          )}\r\n        </div>\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}